#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

struct Point {
    int x, y;
};

double distance(Point a, Point b){
    return sqrt(static_cast<double>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y)));
}

int orientation(Point p, Point q, Point r) {
    long long val = static_cast<long long>(q.y - p.y) * (r.x - q.x) - static_cast<long long>(q.x - p.x) * (r.y - q.y);
    if (val == 0) return 0;
    return (val > 0) ? 1 : 2;
}

vector<Point> convexHull(vector<Point>& points) {
    int n = points.size();
    
    sort(points.begin() + 1, points.end(), [](const Point& a, const Point& b){
        return a.x < b.x || (a.x == b.x && a.y < b.y);
    });
    
    vector<Point> hull;

    for (int i = 0; i < n; ++i) {
        while (hull.size() >= 2 && orientation(hull[hull.size() - 2], hull.back(), points[i]) != 2)
            hull.pop_back();
        hull.push_back(points[i]);
    }

    int t = hull.size() + 1;
    for (int i = n - 2; i >= 0; --i) {
        while (hull.size() >= t && orientation(hull[hull.size() - 2], hull.back(), points[i]) != 2)
            hull.pop_back();
        hull.push_back(points[i]);
    }
    
    hull.pop_back();
    return hull;
}

double Calipers(const vector<Point>& hull) {
    int k = 1;
    int m = hull.size();
    double maxDist = 0.0;

    for (int i = 0; i < m; ++i) {
        while (true) {
            double d1 = distance(hull[i], hull[(k) % m]);
            double d2 = distance(hull[i], hull[(k+1) % m]);
            if (d1 < d2) k++;
            else break;
        }
        maxDist = max(maxDist, distance(hull[i], hull[k % m]));
    }
    return maxDist;
}

int main() {
    int c;
    cin >> c;
    vector<Point> points(c);

    for (int i = 0; i < c; ++i) {
        cin >> points[i].x >> points[i].y;
    }

    vector<Point> hull = convexHull(points);
    double maxdistance = Calipers(hull);

    cout.precision(6);
    cout << fixed << maxdistance << endl;
    
    return 0;
}
