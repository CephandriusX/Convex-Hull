#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <set>

using namespace std;

struct Point {
    int x, y;

    bool operator<(const Point& other) const {
        return tie(x, y) < tie(other.x, other.y);
    }
};

long long distanceSquared(const Point& a, const Point& b) {
    return static_cast<long long>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}

int orientation(const Point& p, const Point& q, const Point& r) {
    long long val = static_cast<long long>(q.y - p.y) * (r.x - q.x) - static_cast<long long>(q.x - p.x) * (r.y - q.y);
    if (val == 0) return 0;
    return (val > 0) ? 1 : 2;
}

vector<Point> convexHull(vector<Point>& points) {
    int n = points.size();

    sort(points.begin(), points.end(), [](const Point& a, const Point& b) {
        return a.x < b.x || (a.x == b.x && a.y < b.y);
    });

    vector<Point> hull;

    for (int i = 0; i < n; ++i) {
        while (hull.size() >= 2 && orientation(hull[hull.size() - 2], hull.back(), points[i]) != 2)
            hull.pop_back();
        hull.push_back(points[i]);
    }

    int t = hull.size() + 1;
    for (int i = n - 2; i >= 0; --i) {
        while (hull.size() >= t && orientation(hull[hull.size() - 2], hull.back(), points[i]) != 2)
            hull.pop_back();
        hull.push_back(points[i]);
    }

    hull.pop_back();
    return hull;
}

long long rotatingCalipers(const vector<Point>& hull) {
    int k = 1;
    int m = hull.size();
    long long max_dist_sq = 0;

    for (int i = 0; i < m; ++i) {
        while (true) {
            long long d1 = distanceSquared(hull[i], hull[(k) % m]);
            long long d2 = distanceSquared(hull[i], hull[(k + 1) % m]);
            if (d2 > d1) {
                k++;
            } else {
                break;
            }
        }
        max_dist_sq = max(max_dist_sq, distanceSquared(hull[i], hull[k % m]));
    }
    return max_dist_sq;
}

int main() {
    int C;
    cin >> C;
    set<Point> unique_points;
    vector<Point> points;

    for (int i = 0; i < C; ++i) {
        Point p;
        cin >> p.x >> p.y;
        if (unique_points.insert(p).second) {
            points.push_back(p);
        }
    }

    if (points.size() == 2) {
        cout << distanceSquared(points[0], points[1]) << endl;
        return 0;
    }

    vector<Point> hull = convexHull(points);
    long long max_distance_sq = rotatingCalipers(hull);

    cout << max_distance_sq << endl;

    return 0;
}
